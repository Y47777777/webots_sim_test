// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TriangleListPrimitive.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Foxglove {

  /// <summary>Holder for reflection information generated from TriangleListPrimitive.proto</summary>
  public static partial class TriangleListPrimitiveReflection {

    #region Descriptor
    /// <summary>File descriptor for TriangleListPrimitive.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TriangleListPrimitiveReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtUcmlhbmdsZUxpc3RQcmltaXRpdmUucHJvdG8SCGZveGdsb3ZlGgtDb2xv",
            "ci5wcm90bxoMUG9pbnQzLnByb3RvGgpQb3NlLnByb3RvIqkBChVUcmlhbmds",
            "ZUxpc3RQcmltaXRpdmUSHAoEcG9zZRgBIAEoCzIOLmZveGdsb3ZlLlBvc2US",
            "IAoGcG9pbnRzGAIgAygLMhAuZm94Z2xvdmUuUG9pbnQzEh4KBWNvbG9yGAMg",
            "ASgLMg8uZm94Z2xvdmUuQ29sb3ISHwoGY29sb3JzGAQgAygLMg8uZm94Z2xv",
            "dmUuQ29sb3ISDwoHaW5kaWNlcxgFIAMoB2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Foxglove.ColorReflection.Descriptor, global::Foxglove.Point3Reflection.Descriptor, global::Foxglove.PoseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Foxglove.TriangleListPrimitive), global::Foxglove.TriangleListPrimitive.Parser, new[]{ "Pose", "Points", "Color", "Colors", "Indices" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A primitive representing a set of triangles or a surface tiled by triangles
  /// </summary>
  public sealed partial class TriangleListPrimitive : pb::IMessage<TriangleListPrimitive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TriangleListPrimitive> _parser = new pb::MessageParser<TriangleListPrimitive>(() => new TriangleListPrimitive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TriangleListPrimitive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Foxglove.TriangleListPrimitiveReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriangleListPrimitive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriangleListPrimitive(TriangleListPrimitive other) : this() {
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      points_ = other.points_.Clone();
      color_ = other.color_ != null ? other.color_.Clone() : null;
      colors_ = other.colors_.Clone();
      indices_ = other.indices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TriangleListPrimitive Clone() {
      return new TriangleListPrimitive(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Foxglove.Pose pose_;
    /// <summary>
    /// Origin of triangles relative to reference frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Foxglove.Pose Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Foxglove.Point3> _repeated_points_codec
        = pb::FieldCodec.ForMessage(18, global::Foxglove.Point3.Parser);
    private readonly pbc::RepeatedField<global::Foxglove.Point3> points_ = new pbc::RepeatedField<global::Foxglove.Point3>();
    /// <summary>
    /// Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Foxglove.Point3> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private global::Foxglove.Color color_;
    /// <summary>
    /// Solid color to use for the whole shape. One of `color` or `colors` must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Foxglove.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "colors" field.</summary>
    public const int ColorsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Foxglove.Color> _repeated_colors_codec
        = pb::FieldCodec.ForMessage(34, global::Foxglove.Color.Parser);
    private readonly pbc::RepeatedField<global::Foxglove.Color> colors_ = new pbc::RepeatedField<global::Foxglove.Color>();
    /// <summary>
    /// Per-vertex colors (if specified, must have the same length as `points`). One of `color` or `colors` must be provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Foxglove.Color> Colors {
      get { return colors_; }
    }

    /// <summary>Field number for the "indices" field.</summary>
    public const int IndicesFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_indices_codec
        = pb::FieldCodec.ForFixed32(42);
    private readonly pbc::RepeatedField<uint> indices_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Indices into the `points` and `colors` attribute arrays, which can be used to avoid duplicating attribute data.
    /// 
    /// If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of `points` provided).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> Indices {
      get { return indices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TriangleListPrimitive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TriangleListPrimitive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if(!points_.Equals(other.points_)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if(!colors_.Equals(other.colors_)) return false;
      if(!indices_.Equals(other.indices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      hash ^= points_.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      hash ^= colors_.GetHashCode();
      hash ^= indices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      points_.WriteTo(output, _repeated_points_codec);
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      colors_.WriteTo(output, _repeated_colors_codec);
      indices_.WriteTo(output, _repeated_indices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      points_.WriteTo(ref output, _repeated_points_codec);
      if (color_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Color);
      }
      colors_.WriteTo(ref output, _repeated_colors_codec);
      indices_.WriteTo(ref output, _repeated_indices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      size += colors_.CalculateSize(_repeated_colors_codec);
      size += indices_.CalculateSize(_repeated_indices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TriangleListPrimitive other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Foxglove.Pose();
        }
        Pose.MergeFrom(other.Pose);
      }
      points_.Add(other.points_);
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Foxglove.Color();
        }
        Color.MergeFrom(other.Color);
      }
      colors_.Add(other.colors_);
      indices_.Add(other.indices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Foxglove.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 18: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Foxglove.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 34: {
            colors_.AddEntriesFrom(input, _repeated_colors_codec);
            break;
          }
          case 42:
          case 45: {
            indices_.AddEntriesFrom(input, _repeated_indices_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Foxglove.Pose();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 18: {
            points_.AddEntriesFrom(ref input, _repeated_points_codec);
            break;
          }
          case 26: {
            if (color_ == null) {
              Color = new global::Foxglove.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 34: {
            colors_.AddEntriesFrom(ref input, _repeated_colors_codec);
            break;
          }
          case 42:
          case 45: {
            indices_.AddEntriesFrom(ref input, _repeated_indices_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
