// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForkPose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ForkPose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ForkPose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Quaternion.pb.h"
#include "Vector3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ForkPose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ForkPose_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ForkPose_2eproto;
namespace foxglove {
class ForkPose;
struct ForkPoseDefaultTypeInternal;
extern ForkPoseDefaultTypeInternal _ForkPose_default_instance_;
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> ::foxglove::ForkPose* Arena::CreateMaybeMessage<::foxglove::ForkPose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace foxglove {

// ===================================================================

class ForkPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:foxglove.ForkPose) */ {
 public:
  inline ForkPose() : ForkPose(nullptr) {}
  ~ForkPose() override;
  explicit PROTOBUF_CONSTEXPR ForkPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForkPose(const ForkPose& from);
  ForkPose(ForkPose&& from) noexcept
    : ForkPose() {
    *this = ::std::move(from);
  }

  inline ForkPose& operator=(const ForkPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForkPose& operator=(ForkPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForkPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForkPose* internal_default_instance() {
    return reinterpret_cast<const ForkPose*>(
               &_ForkPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ForkPose& a, ForkPose& b) {
    a.Swap(&b);
  }
  inline void Swap(ForkPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForkPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForkPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForkPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForkPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForkPose& from) {
    ForkPose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForkPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "foxglove.ForkPose";
  }
  protected:
  explicit ForkPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 3,
    kZFieldNumber = 5,
    kXIsvalidFieldNumber = 2,
    kYIsvalidFieldNumber = 4,
    kZIsvalidFieldNumber = 6,
    kRIsvalidFieldNumber = 8,
    kRFieldNumber = 7,
    kPFieldNumber = 9,
    kAFieldNumber = 11,
    kPIsvalidFieldNumber = 10,
    kAIsvalidFieldNumber = 12,
    kCIsvalidFieldNumber = 14,
    kCFieldNumber = 13,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 5;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // bool x_isvalid = 2;
  void clear_x_isvalid();
  bool x_isvalid() const;
  void set_x_isvalid(bool value);
  private:
  bool _internal_x_isvalid() const;
  void _internal_set_x_isvalid(bool value);
  public:

  // bool y_isvalid = 4;
  void clear_y_isvalid();
  bool y_isvalid() const;
  void set_y_isvalid(bool value);
  private:
  bool _internal_y_isvalid() const;
  void _internal_set_y_isvalid(bool value);
  public:

  // bool z_isvalid = 6;
  void clear_z_isvalid();
  bool z_isvalid() const;
  void set_z_isvalid(bool value);
  private:
  bool _internal_z_isvalid() const;
  void _internal_set_z_isvalid(bool value);
  public:

  // bool r_isvalid = 8;
  void clear_r_isvalid();
  bool r_isvalid() const;
  void set_r_isvalid(bool value);
  private:
  bool _internal_r_isvalid() const;
  void _internal_set_r_isvalid(bool value);
  public:

  // float r = 7;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float p = 9;
  void clear_p();
  float p() const;
  void set_p(float value);
  private:
  float _internal_p() const;
  void _internal_set_p(float value);
  public:

  // float a = 11;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // bool p_isvalid = 10;
  void clear_p_isvalid();
  bool p_isvalid() const;
  void set_p_isvalid(bool value);
  private:
  bool _internal_p_isvalid() const;
  void _internal_set_p_isvalid(bool value);
  public:

  // bool a_isvalid = 12;
  void clear_a_isvalid();
  bool a_isvalid() const;
  void set_a_isvalid(bool value);
  private:
  bool _internal_a_isvalid() const;
  void _internal_set_a_isvalid(bool value);
  public:

  // bool c_isvalid = 14;
  void clear_c_isvalid();
  bool c_isvalid() const;
  void set_c_isvalid(bool value);
  private:
  bool _internal_c_isvalid() const;
  void _internal_set_c_isvalid(bool value);
  public:

  // float c = 13;
  void clear_c();
  float c() const;
  void set_c(float value);
  private:
  float _internal_c() const;
  void _internal_set_c(float value);
  public:

  // @@protoc_insertion_point(class_scope:foxglove.ForkPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    bool x_isvalid_;
    bool y_isvalid_;
    bool z_isvalid_;
    bool r_isvalid_;
    float r_;
    float p_;
    float a_;
    bool p_isvalid_;
    bool a_isvalid_;
    bool c_isvalid_;
    float c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ForkPose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ForkPose

// float x = 1;
inline void ForkPose::clear_x() {
  _impl_.x_ = 0;
}
inline float ForkPose::_internal_x() const {
  return _impl_.x_;
}
inline float ForkPose::x() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.x)
  return _internal_x();
}
inline void ForkPose::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ForkPose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.x)
}

// bool x_isvalid = 2;
inline void ForkPose::clear_x_isvalid() {
  _impl_.x_isvalid_ = false;
}
inline bool ForkPose::_internal_x_isvalid() const {
  return _impl_.x_isvalid_;
}
inline bool ForkPose::x_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.x_isvalid)
  return _internal_x_isvalid();
}
inline void ForkPose::_internal_set_x_isvalid(bool value) {
  
  _impl_.x_isvalid_ = value;
}
inline void ForkPose::set_x_isvalid(bool value) {
  _internal_set_x_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.x_isvalid)
}

// float y = 3;
inline void ForkPose::clear_y() {
  _impl_.y_ = 0;
}
inline float ForkPose::_internal_y() const {
  return _impl_.y_;
}
inline float ForkPose::y() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.y)
  return _internal_y();
}
inline void ForkPose::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void ForkPose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.y)
}

// bool y_isvalid = 4;
inline void ForkPose::clear_y_isvalid() {
  _impl_.y_isvalid_ = false;
}
inline bool ForkPose::_internal_y_isvalid() const {
  return _impl_.y_isvalid_;
}
inline bool ForkPose::y_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.y_isvalid)
  return _internal_y_isvalid();
}
inline void ForkPose::_internal_set_y_isvalid(bool value) {
  
  _impl_.y_isvalid_ = value;
}
inline void ForkPose::set_y_isvalid(bool value) {
  _internal_set_y_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.y_isvalid)
}

// float z = 5;
inline void ForkPose::clear_z() {
  _impl_.z_ = 0;
}
inline float ForkPose::_internal_z() const {
  return _impl_.z_;
}
inline float ForkPose::z() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.z)
  return _internal_z();
}
inline void ForkPose::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void ForkPose::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.z)
}

// bool z_isvalid = 6;
inline void ForkPose::clear_z_isvalid() {
  _impl_.z_isvalid_ = false;
}
inline bool ForkPose::_internal_z_isvalid() const {
  return _impl_.z_isvalid_;
}
inline bool ForkPose::z_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.z_isvalid)
  return _internal_z_isvalid();
}
inline void ForkPose::_internal_set_z_isvalid(bool value) {
  
  _impl_.z_isvalid_ = value;
}
inline void ForkPose::set_z_isvalid(bool value) {
  _internal_set_z_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.z_isvalid)
}

// float r = 7;
inline void ForkPose::clear_r() {
  _impl_.r_ = 0;
}
inline float ForkPose::_internal_r() const {
  return _impl_.r_;
}
inline float ForkPose::r() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.r)
  return _internal_r();
}
inline void ForkPose::_internal_set_r(float value) {
  
  _impl_.r_ = value;
}
inline void ForkPose::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.r)
}

// bool r_isvalid = 8;
inline void ForkPose::clear_r_isvalid() {
  _impl_.r_isvalid_ = false;
}
inline bool ForkPose::_internal_r_isvalid() const {
  return _impl_.r_isvalid_;
}
inline bool ForkPose::r_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.r_isvalid)
  return _internal_r_isvalid();
}
inline void ForkPose::_internal_set_r_isvalid(bool value) {
  
  _impl_.r_isvalid_ = value;
}
inline void ForkPose::set_r_isvalid(bool value) {
  _internal_set_r_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.r_isvalid)
}

// float p = 9;
inline void ForkPose::clear_p() {
  _impl_.p_ = 0;
}
inline float ForkPose::_internal_p() const {
  return _impl_.p_;
}
inline float ForkPose::p() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.p)
  return _internal_p();
}
inline void ForkPose::_internal_set_p(float value) {
  
  _impl_.p_ = value;
}
inline void ForkPose::set_p(float value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.p)
}

// bool p_isvalid = 10;
inline void ForkPose::clear_p_isvalid() {
  _impl_.p_isvalid_ = false;
}
inline bool ForkPose::_internal_p_isvalid() const {
  return _impl_.p_isvalid_;
}
inline bool ForkPose::p_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.p_isvalid)
  return _internal_p_isvalid();
}
inline void ForkPose::_internal_set_p_isvalid(bool value) {
  
  _impl_.p_isvalid_ = value;
}
inline void ForkPose::set_p_isvalid(bool value) {
  _internal_set_p_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.p_isvalid)
}

// float a = 11;
inline void ForkPose::clear_a() {
  _impl_.a_ = 0;
}
inline float ForkPose::_internal_a() const {
  return _impl_.a_;
}
inline float ForkPose::a() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.a)
  return _internal_a();
}
inline void ForkPose::_internal_set_a(float value) {
  
  _impl_.a_ = value;
}
inline void ForkPose::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.a)
}

// bool a_isvalid = 12;
inline void ForkPose::clear_a_isvalid() {
  _impl_.a_isvalid_ = false;
}
inline bool ForkPose::_internal_a_isvalid() const {
  return _impl_.a_isvalid_;
}
inline bool ForkPose::a_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.a_isvalid)
  return _internal_a_isvalid();
}
inline void ForkPose::_internal_set_a_isvalid(bool value) {
  
  _impl_.a_isvalid_ = value;
}
inline void ForkPose::set_a_isvalid(bool value) {
  _internal_set_a_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.a_isvalid)
}

// float c = 13;
inline void ForkPose::clear_c() {
  _impl_.c_ = 0;
}
inline float ForkPose::_internal_c() const {
  return _impl_.c_;
}
inline float ForkPose::c() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.c)
  return _internal_c();
}
inline void ForkPose::_internal_set_c(float value) {
  
  _impl_.c_ = value;
}
inline void ForkPose::set_c(float value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.c)
}

// bool c_isvalid = 14;
inline void ForkPose::clear_c_isvalid() {
  _impl_.c_isvalid_ = false;
}
inline bool ForkPose::_internal_c_isvalid() const {
  return _impl_.c_isvalid_;
}
inline bool ForkPose::c_isvalid() const {
  // @@protoc_insertion_point(field_get:foxglove.ForkPose.c_isvalid)
  return _internal_c_isvalid();
}
inline void ForkPose::_internal_set_c_isvalid(bool value) {
  
  _impl_.c_isvalid_ = value;
}
inline void ForkPose::set_c_isvalid(bool value) {
  _internal_set_c_isvalid(value);
  // @@protoc_insertion_point(field_set:foxglove.ForkPose.c_isvalid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace foxglove

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ForkPose_2eproto
