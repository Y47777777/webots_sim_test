// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ForkPose.proto

#include "ForkPose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace foxglove {
PROTOBUF_CONSTEXPR ForkPose::ForkPose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.x_isvalid_)*/false
  , /*decltype(_impl_.y_isvalid_)*/false
  , /*decltype(_impl_.z_isvalid_)*/false
  , /*decltype(_impl_.r_isvalid_)*/false
  , /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.p_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.p_isvalid_)*/false
  , /*decltype(_impl_.a_isvalid_)*/false
  , /*decltype(_impl_.c_isvalid_)*/false
  , /*decltype(_impl_.c_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForkPoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForkPoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForkPoseDefaultTypeInternal() {}
  union {
    ForkPose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForkPoseDefaultTypeInternal _ForkPose_default_instance_;
}  // namespace foxglove
static ::_pb::Metadata file_level_metadata_ForkPose_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ForkPose_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ForkPose_2eproto = nullptr;

const uint32_t TableStruct_ForkPose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.x_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.y_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.z_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.r_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.p_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.p_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.a_isvalid_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.c_),
  PROTOBUF_FIELD_OFFSET(::foxglove::ForkPose, _impl_.c_isvalid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::foxglove::ForkPose)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::foxglove::_ForkPose_default_instance_._instance,
};

const char descriptor_table_protodef_ForkPose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ForkPose.proto\022\010foxglove\032\020Quaternion.p"
  "roto\032\rVector3.proto\"\334\001\n\010ForkPose\022\t\n\001x\030\001 "
  "\001(\002\022\021\n\tx_isvalid\030\002 \001(\010\022\t\n\001y\030\003 \001(\002\022\021\n\ty_i"
  "svalid\030\004 \001(\010\022\t\n\001z\030\005 \001(\002\022\021\n\tz_isvalid\030\006 \001"
  "(\010\022\t\n\001r\030\007 \001(\002\022\021\n\tr_isvalid\030\010 \001(\010\022\t\n\001p\030\t "
  "\001(\002\022\021\n\tp_isvalid\030\n \001(\010\022\t\n\001a\030\013 \001(\002\022\021\n\ta_i"
  "svalid\030\014 \001(\010\022\t\n\001c\030\r \001(\002\022\021\n\tc_isvalid\030\016 \001"
  "(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ForkPose_2eproto_deps[2] = {
  &::descriptor_table_Quaternion_2eproto,
  &::descriptor_table_Vector3_2eproto,
};
static ::_pbi::once_flag descriptor_table_ForkPose_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ForkPose_2eproto = {
    false, false, 290, descriptor_table_protodef_ForkPose_2eproto,
    "ForkPose.proto",
    &descriptor_table_ForkPose_2eproto_once, descriptor_table_ForkPose_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_ForkPose_2eproto::offsets,
    file_level_metadata_ForkPose_2eproto, file_level_enum_descriptors_ForkPose_2eproto,
    file_level_service_descriptors_ForkPose_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ForkPose_2eproto_getter() {
  return &descriptor_table_ForkPose_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ForkPose_2eproto(&descriptor_table_ForkPose_2eproto);
namespace foxglove {

// ===================================================================

class ForkPose::_Internal {
 public:
};

ForkPose::ForkPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:foxglove.ForkPose)
}
ForkPose::ForkPose(const ForkPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForkPose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.x_isvalid_){}
    , decltype(_impl_.y_isvalid_){}
    , decltype(_impl_.z_isvalid_){}
    , decltype(_impl_.r_isvalid_){}
    , decltype(_impl_.r_){}
    , decltype(_impl_.p_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.p_isvalid_){}
    , decltype(_impl_.a_isvalid_){}
    , decltype(_impl_.c_isvalid_){}
    , decltype(_impl_.c_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.c_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.c_));
  // @@protoc_insertion_point(copy_constructor:foxglove.ForkPose)
}

inline void ForkPose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.x_isvalid_){false}
    , decltype(_impl_.y_isvalid_){false}
    , decltype(_impl_.z_isvalid_){false}
    , decltype(_impl_.r_isvalid_){false}
    , decltype(_impl_.r_){0}
    , decltype(_impl_.p_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.p_isvalid_){false}
    , decltype(_impl_.a_isvalid_){false}
    , decltype(_impl_.c_isvalid_){false}
    , decltype(_impl_.c_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ForkPose::~ForkPose() {
  // @@protoc_insertion_point(destructor:foxglove.ForkPose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForkPose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForkPose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForkPose::Clear() {
// @@protoc_insertion_point(message_clear_start:foxglove.ForkPose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.c_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.c_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForkPose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool x_isvalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool y_isvalid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool z_isvalid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.z_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float r = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool r_isvalid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.r_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float p = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool p_isvalid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.p_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float a = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool a_isvalid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.a_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float c = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool c_isvalid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.c_isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForkPose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:foxglove.ForkPose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // bool x_isvalid = 2;
  if (this->_internal_x_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_x_isvalid(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // bool y_isvalid = 4;
  if (this->_internal_y_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_y_isvalid(), target);
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // bool z_isvalid = 6;
  if (this->_internal_z_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_z_isvalid(), target);
  }

  // float r = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_r(), target);
  }

  // bool r_isvalid = 8;
  if (this->_internal_r_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_r_isvalid(), target);
  }

  // float p = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_p = this->_internal_p();
  uint32_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_p(), target);
  }

  // bool p_isvalid = 10;
  if (this->_internal_p_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_p_isvalid(), target);
  }

  // float a = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_a(), target);
  }

  // bool a_isvalid = 12;
  if (this->_internal_a_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_a_isvalid(), target);
  }

  // float c = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_c = this->_internal_c();
  uint32_t raw_c;
  memcpy(&raw_c, &tmp_c, sizeof(tmp_c));
  if (raw_c != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_c(), target);
  }

  // bool c_isvalid = 14;
  if (this->_internal_c_isvalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_c_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:foxglove.ForkPose)
  return target;
}

size_t ForkPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:foxglove.ForkPose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // bool x_isvalid = 2;
  if (this->_internal_x_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // bool y_isvalid = 4;
  if (this->_internal_y_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // bool z_isvalid = 6;
  if (this->_internal_z_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // bool r_isvalid = 8;
  if (this->_internal_r_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // float r = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float p = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_p = this->_internal_p();
  uint32_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    total_size += 1 + 4;
  }

  // float a = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  // bool p_isvalid = 10;
  if (this->_internal_p_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // bool a_isvalid = 12;
  if (this->_internal_a_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // bool c_isvalid = 14;
  if (this->_internal_c_isvalid() != 0) {
    total_size += 1 + 1;
  }

  // float c = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_c = this->_internal_c();
  uint32_t raw_c;
  memcpy(&raw_c, &tmp_c, sizeof(tmp_c));
  if (raw_c != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForkPose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForkPose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForkPose::GetClassData() const { return &_class_data_; }


void ForkPose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForkPose*>(&to_msg);
  auto& from = static_cast<const ForkPose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:foxglove.ForkPose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  if (from._internal_x_isvalid() != 0) {
    _this->_internal_set_x_isvalid(from._internal_x_isvalid());
  }
  if (from._internal_y_isvalid() != 0) {
    _this->_internal_set_y_isvalid(from._internal_y_isvalid());
  }
  if (from._internal_z_isvalid() != 0) {
    _this->_internal_set_z_isvalid(from._internal_z_isvalid());
  }
  if (from._internal_r_isvalid() != 0) {
    _this->_internal_set_r_isvalid(from._internal_r_isvalid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_p = from._internal_p();
  uint32_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    _this->_internal_set_p(from._internal_p());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_p_isvalid() != 0) {
    _this->_internal_set_p_isvalid(from._internal_p_isvalid());
  }
  if (from._internal_a_isvalid() != 0) {
    _this->_internal_set_a_isvalid(from._internal_a_isvalid());
  }
  if (from._internal_c_isvalid() != 0) {
    _this->_internal_set_c_isvalid(from._internal_c_isvalid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_c = from._internal_c();
  uint32_t raw_c;
  memcpy(&raw_c, &tmp_c, sizeof(tmp_c));
  if (raw_c != 0) {
    _this->_internal_set_c(from._internal_c());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForkPose::CopyFrom(const ForkPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:foxglove.ForkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkPose::IsInitialized() const {
  return true;
}

void ForkPose::InternalSwap(ForkPose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForkPose, _impl_.c_)
      + sizeof(ForkPose::_impl_.c_)
      - PROTOBUF_FIELD_OFFSET(ForkPose, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForkPose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ForkPose_2eproto_getter, &descriptor_table_ForkPose_2eproto_once,
      file_level_metadata_ForkPose_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace foxglove
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::foxglove::ForkPose*
Arena::CreateMaybeMessage< ::foxglove::ForkPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::foxglove::ForkPose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
