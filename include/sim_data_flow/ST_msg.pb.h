// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ST_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ST_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ST_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Imu.pb.h"
#include "SteeringThetaInFrame.pb.h"
#include "Speed.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ST_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ST_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ST_5fmsg_2eproto;
namespace sim_data_flow {
class ST_msg;
struct ST_msgDefaultTypeInternal;
extern ST_msgDefaultTypeInternal _ST_msg_default_instance_;
}  // namespace sim_data_flow
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_data_flow::ST_msg* Arena::CreateMaybeMessage<::sim_data_flow::ST_msg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_data_flow {

// ===================================================================

class ST_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_data_flow.ST_msg) */ {
 public:
  inline ST_msg() : ST_msg(nullptr) {}
  ~ST_msg() override;
  explicit PROTOBUF_CONSTEXPR ST_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ST_msg(const ST_msg& from);
  ST_msg(ST_msg&& from) noexcept
    : ST_msg() {
    *this = ::std::move(from);
  }

  inline ST_msg& operator=(const ST_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ST_msg& operator=(ST_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ST_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ST_msg* internal_default_instance() {
    return reinterpret_cast<const ST_msg*>(
               &_ST_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ST_msg& a, ST_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(ST_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ST_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ST_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ST_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ST_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ST_msg& from) {
    ST_msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ST_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_data_flow.ST_msg";
  }
  protected:
  explicit ST_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kImuFieldNumber = 2,
    kSteeringFieldNumber = 3,
    kSpeedFieldNumber = 4,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .foxglove.Imu imu = 2;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::foxglove::Imu& imu() const;
  PROTOBUF_NODISCARD ::foxglove::Imu* release_imu();
  ::foxglove::Imu* mutable_imu();
  void set_allocated_imu(::foxglove::Imu* imu);
  private:
  const ::foxglove::Imu& _internal_imu() const;
  ::foxglove::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::foxglove::Imu* imu);
  ::foxglove::Imu* unsafe_arena_release_imu();

  // .foxglove.SteeringTheta steering = 3;
  bool has_steering() const;
  private:
  bool _internal_has_steering() const;
  public:
  void clear_steering();
  const ::foxglove::SteeringTheta& steering() const;
  PROTOBUF_NODISCARD ::foxglove::SteeringTheta* release_steering();
  ::foxglove::SteeringTheta* mutable_steering();
  void set_allocated_steering(::foxglove::SteeringTheta* steering);
  private:
  const ::foxglove::SteeringTheta& _internal_steering() const;
  ::foxglove::SteeringTheta* _internal_mutable_steering();
  public:
  void unsafe_arena_set_allocated_steering(
      ::foxglove::SteeringTheta* steering);
  ::foxglove::SteeringTheta* unsafe_arena_release_steering();

  // .foxglove.Speed speed = 4;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::foxglove::Speed& speed() const;
  PROTOBUF_NODISCARD ::foxglove::Speed* release_speed();
  ::foxglove::Speed* mutable_speed();
  void set_allocated_speed(::foxglove::Speed* speed);
  private:
  const ::foxglove::Speed& _internal_speed() const;
  ::foxglove::Speed* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::foxglove::Speed* speed);
  ::foxglove::Speed* unsafe_arena_release_speed();

  // @@protoc_insertion_point(class_scope:sim_data_flow.ST_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::foxglove::Imu* imu_;
    ::foxglove::SteeringTheta* steering_;
    ::foxglove::Speed* speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ST_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ST_msg

// .google.protobuf.Timestamp timestamp = 1;
inline bool ST_msg::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool ST_msg::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ST_msg::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ST_msg::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_data_flow.ST_msg.timestamp)
  return _internal_timestamp();
}
inline void ST_msg::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_data_flow.ST_msg.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ST_msg::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ST_msg::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:sim_data_flow.ST_msg.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ST_msg::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ST_msg::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:sim_data_flow.ST_msg.timestamp)
  return _msg;
}
inline void ST_msg::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:sim_data_flow.ST_msg.timestamp)
}

// .foxglove.Imu imu = 2;
inline bool ST_msg::_internal_has_imu() const {
  return this != internal_default_instance() && _impl_.imu_ != nullptr;
}
inline bool ST_msg::has_imu() const {
  return _internal_has_imu();
}
inline const ::foxglove::Imu& ST_msg::_internal_imu() const {
  const ::foxglove::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Imu&>(
      ::foxglove::_Imu_default_instance_);
}
inline const ::foxglove::Imu& ST_msg::imu() const {
  // @@protoc_insertion_point(field_get:sim_data_flow.ST_msg.imu)
  return _internal_imu();
}
inline void ST_msg::unsafe_arena_set_allocated_imu(
    ::foxglove::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = imu;
  if (imu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_data_flow.ST_msg.imu)
}
inline ::foxglove::Imu* ST_msg::release_imu() {
  
  ::foxglove::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Imu* ST_msg::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:sim_data_flow.ST_msg.imu)
  
  ::foxglove::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::foxglove::Imu* ST_msg::_internal_mutable_imu() {
  
  if (_impl_.imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Imu>(GetArenaForAllocation());
    _impl_.imu_ = p;
  }
  return _impl_.imu_;
}
inline ::foxglove::Imu* ST_msg::mutable_imu() {
  ::foxglove::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:sim_data_flow.ST_msg.imu)
  return _msg;
}
inline void ST_msg::set_allocated_imu(::foxglove::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu));
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:sim_data_flow.ST_msg.imu)
}

// .foxglove.SteeringTheta steering = 3;
inline bool ST_msg::_internal_has_steering() const {
  return this != internal_default_instance() && _impl_.steering_ != nullptr;
}
inline bool ST_msg::has_steering() const {
  return _internal_has_steering();
}
inline const ::foxglove::SteeringTheta& ST_msg::_internal_steering() const {
  const ::foxglove::SteeringTheta* p = _impl_.steering_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::SteeringTheta&>(
      ::foxglove::_SteeringTheta_default_instance_);
}
inline const ::foxglove::SteeringTheta& ST_msg::steering() const {
  // @@protoc_insertion_point(field_get:sim_data_flow.ST_msg.steering)
  return _internal_steering();
}
inline void ST_msg::unsafe_arena_set_allocated_steering(
    ::foxglove::SteeringTheta* steering) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steering_);
  }
  _impl_.steering_ = steering;
  if (steering) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_data_flow.ST_msg.steering)
}
inline ::foxglove::SteeringTheta* ST_msg::release_steering() {
  
  ::foxglove::SteeringTheta* temp = _impl_.steering_;
  _impl_.steering_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::SteeringTheta* ST_msg::unsafe_arena_release_steering() {
  // @@protoc_insertion_point(field_release:sim_data_flow.ST_msg.steering)
  
  ::foxglove::SteeringTheta* temp = _impl_.steering_;
  _impl_.steering_ = nullptr;
  return temp;
}
inline ::foxglove::SteeringTheta* ST_msg::_internal_mutable_steering() {
  
  if (_impl_.steering_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::SteeringTheta>(GetArenaForAllocation());
    _impl_.steering_ = p;
  }
  return _impl_.steering_;
}
inline ::foxglove::SteeringTheta* ST_msg::mutable_steering() {
  ::foxglove::SteeringTheta* _msg = _internal_mutable_steering();
  // @@protoc_insertion_point(field_mutable:sim_data_flow.ST_msg.steering)
  return _msg;
}
inline void ST_msg::set_allocated_steering(::foxglove::SteeringTheta* steering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.steering_);
  }
  if (steering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steering));
    if (message_arena != submessage_arena) {
      steering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steering, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.steering_ = steering;
  // @@protoc_insertion_point(field_set_allocated:sim_data_flow.ST_msg.steering)
}

// .foxglove.Speed speed = 4;
inline bool ST_msg::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool ST_msg::has_speed() const {
  return _internal_has_speed();
}
inline const ::foxglove::Speed& ST_msg::_internal_speed() const {
  const ::foxglove::Speed* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::foxglove::Speed&>(
      ::foxglove::_Speed_default_instance_);
}
inline const ::foxglove::Speed& ST_msg::speed() const {
  // @@protoc_insertion_point(field_get:sim_data_flow.ST_msg.speed)
  return _internal_speed();
}
inline void ST_msg::unsafe_arena_set_allocated_speed(
    ::foxglove::Speed* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_data_flow.ST_msg.speed)
}
inline ::foxglove::Speed* ST_msg::release_speed() {
  
  ::foxglove::Speed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::foxglove::Speed* ST_msg::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:sim_data_flow.ST_msg.speed)
  
  ::foxglove::Speed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::foxglove::Speed* ST_msg::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::foxglove::Speed>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::foxglove::Speed* ST_msg::mutable_speed() {
  ::foxglove::Speed* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:sim_data_flow.ST_msg.speed)
  return _msg;
}
inline void ST_msg::set_allocated_speed(::foxglove::Speed* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed));
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:sim_data_flow.ST_msg.speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_data_flow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ST_5fmsg_2eproto
