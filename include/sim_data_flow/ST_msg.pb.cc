// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ST_msg.proto

#include "ST_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sim_data_flow {
PROTOBUF_CONSTEXPR ST_msg::ST_msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.steering_)*/nullptr
  , /*decltype(_impl_.speed_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ST_msgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ST_msgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ST_msgDefaultTypeInternal() {}
  union {
    ST_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ST_msgDefaultTypeInternal _ST_msg_default_instance_;
}  // namespace sim_data_flow
static ::_pb::Metadata file_level_metadata_ST_5fmsg_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ST_5fmsg_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ST_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_ST_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_data_flow::ST_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sim_data_flow::ST_msg, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::sim_data_flow::ST_msg, _impl_.imu_),
  PROTOBUF_FIELD_OFFSET(::sim_data_flow::ST_msg, _impl_.steering_),
  PROTOBUF_FIELD_OFFSET(::sim_data_flow::ST_msg, _impl_.speed_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sim_data_flow::ST_msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sim_data_flow::_ST_msg_default_instance_._instance,
};

const char descriptor_table_protodef_ST_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ST_msg.proto\022\rsim_data_flow\032\037google/pr"
  "otobuf/timestamp.proto\032\tImu.proto\032\032Steer"
  "ingThetaInFrame.proto\032\013Speed.proto\"\236\001\n\006S"
  "T_msg\022-\n\ttimestamp\030\001 \001(\0132\032.google.protob"
  "uf.Timestamp\022\032\n\003imu\030\002 \001(\0132\r.foxglove.Imu"
  "\022)\n\010steering\030\003 \001(\0132\027.foxglove.SteeringTh"
  "eta\022\036\n\005speed\030\004 \001(\0132\017.foxglove.Speedb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ST_5fmsg_2eproto_deps[4] = {
  &::descriptor_table_Imu_2eproto,
  &::descriptor_table_Speed_2eproto,
  &::descriptor_table_SteeringThetaInFrame_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_ST_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ST_5fmsg_2eproto = {
    false, false, 283, descriptor_table_protodef_ST_5fmsg_2eproto,
    "ST_msg.proto",
    &descriptor_table_ST_5fmsg_2eproto_once, descriptor_table_ST_5fmsg_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_ST_5fmsg_2eproto::offsets,
    file_level_metadata_ST_5fmsg_2eproto, file_level_enum_descriptors_ST_5fmsg_2eproto,
    file_level_service_descriptors_ST_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ST_5fmsg_2eproto_getter() {
  return &descriptor_table_ST_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ST_5fmsg_2eproto(&descriptor_table_ST_5fmsg_2eproto);
namespace sim_data_flow {

// ===================================================================

class ST_msg::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ST_msg* msg);
  static const ::foxglove::Imu& imu(const ST_msg* msg);
  static const ::foxglove::SteeringTheta& steering(const ST_msg* msg);
  static const ::foxglove::Speed& speed(const ST_msg* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ST_msg::_Internal::timestamp(const ST_msg* msg) {
  return *msg->_impl_.timestamp_;
}
const ::foxglove::Imu&
ST_msg::_Internal::imu(const ST_msg* msg) {
  return *msg->_impl_.imu_;
}
const ::foxglove::SteeringTheta&
ST_msg::_Internal::steering(const ST_msg* msg) {
  return *msg->_impl_.steering_;
}
const ::foxglove::Speed&
ST_msg::_Internal::speed(const ST_msg* msg) {
  return *msg->_impl_.speed_;
}
void ST_msg::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
void ST_msg::clear_imu() {
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
}
void ST_msg::clear_steering() {
  if (GetArenaForAllocation() == nullptr && _impl_.steering_ != nullptr) {
    delete _impl_.steering_;
  }
  _impl_.steering_ = nullptr;
}
void ST_msg::clear_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
}
ST_msg::ST_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sim_data_flow.ST_msg)
}
ST_msg::ST_msg(const ST_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ST_msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.steering_){nullptr}
    , decltype(_impl_.speed_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::foxglove::Imu(*from._impl_.imu_);
  }
  if (from._internal_has_steering()) {
    _this->_impl_.steering_ = new ::foxglove::SteeringTheta(*from._impl_.steering_);
  }
  if (from._internal_has_speed()) {
    _this->_impl_.speed_ = new ::foxglove::Speed(*from._impl_.speed_);
  }
  // @@protoc_insertion_point(copy_constructor:sim_data_flow.ST_msg)
}

inline void ST_msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.steering_){nullptr}
    , decltype(_impl_.speed_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ST_msg::~ST_msg() {
  // @@protoc_insertion_point(destructor:sim_data_flow.ST_msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ST_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.steering_;
  if (this != internal_default_instance()) delete _impl_.speed_;
}

void ST_msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ST_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_data_flow.ST_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.imu_ != nullptr) {
    delete _impl_.imu_;
  }
  _impl_.imu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.steering_ != nullptr) {
    delete _impl_.steering_;
  }
  _impl_.steering_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ST_msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Imu imu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.SteeringTheta steering = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .foxglove.Speed speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ST_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_data_flow.ST_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Imu imu = 2;
  if (this->_internal_has_imu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // .foxglove.SteeringTheta steering = 3;
  if (this->_internal_has_steering()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::steering(this),
        _Internal::steering(this).GetCachedSize(), target, stream);
  }

  // .foxglove.Speed speed = 4;
  if (this->_internal_has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::speed(this),
        _Internal::speed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_data_flow.ST_msg)
  return target;
}

size_t ST_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_data_flow.ST_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .foxglove.Imu imu = 2;
  if (this->_internal_has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.imu_);
  }

  // .foxglove.SteeringTheta steering = 3;
  if (this->_internal_has_steering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.steering_);
  }

  // .foxglove.Speed speed = 4;
  if (this->_internal_has_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speed_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ST_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ST_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ST_msg::GetClassData() const { return &_class_data_; }


void ST_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ST_msg*>(&to_msg);
  auto& from = static_cast<const ST_msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sim_data_flow.ST_msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_imu()) {
    _this->_internal_mutable_imu()->::foxglove::Imu::MergeFrom(
        from._internal_imu());
  }
  if (from._internal_has_steering()) {
    _this->_internal_mutable_steering()->::foxglove::SteeringTheta::MergeFrom(
        from._internal_steering());
  }
  if (from._internal_has_speed()) {
    _this->_internal_mutable_speed()->::foxglove::Speed::MergeFrom(
        from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ST_msg::CopyFrom(const ST_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_data_flow.ST_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ST_msg::IsInitialized() const {
  return true;
}

void ST_msg::InternalSwap(ST_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ST_msg, _impl_.speed_)
      + sizeof(ST_msg::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(ST_msg, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ST_msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ST_5fmsg_2eproto_getter, &descriptor_table_ST_5fmsg_2eproto_once,
      file_level_metadata_ST_5fmsg_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_data_flow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_data_flow::ST_msg*
Arena::CreateMaybeMessage< ::sim_data_flow::ST_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_data_flow::ST_msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
